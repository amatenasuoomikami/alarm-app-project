	
	# パターン設定可能な目覚まし時計アプリ 設計書
	
	## 1. システム概要
	
	プロジェクト名: パターン設定可能な目覚まし時計アプリ
	
	目的:
	ユーザーが日ごとに異なる目覚まし時間のパターンを設定できる、カスタマイズ性の高い目覚まし時計アプリケーションを開発する。
	
	主な機能:
	- 基本的な目覚まし時計機能
	- カレンダーベースの日別パターン設定
	- パターン自体の作成・編集機能
	
	プラットフォーム:
	- Androidアプリケーション
	- Webアプリケーション（TypeScript + React）
	- バックエンドサーバー（AWS Linux, Python）
	
	開発期間: 3ヶ月
	
	## 2. 機能要件
	
	2.1 基本的な目覚まし時計機能
	- アラーム時刻の設定
	- アラーム音の再生
	- アラームのオン/オフ切り替え
	- 現在時刻の表示
	
	2.2 カレンダーベースの日別パターン設定
	- カレンダー表示機能
	- 日付ごとにアラームパターンを割り当てる機能
	- 週単位、月単位でのパターン繰り返し設定
	
	2.3 パターン作成・編集機能
	- 新規パターンの作成
	- 既存パターンの編集
	- パターンの削除
	- パターンに名前をつける機能
	
	2.4 スヌーズ機能
	- スヌーズ時間の設定（5分、10分など）
	- スヌーズ回数の制限設定
	
	2.5 カスタム音声・メロディ設定
	- デフォルトのアラーム音選択
	- カスタム音声ファイルのアップロードと使用
	- 音量調整機能
	
	2.6 段階的音量増加機能
	- アラーム開始時の音量設定
	- 最大音量の設定
	- 音量増加の時間間隔設定
	
	2.7 天気情報連携機能
	- 現在地の天気情報取得
	- アラーム時に天気情報を表示
	
	2.8 設定・同期機能
	- ユーザー設定の保存
	- クラウドへの設定バックアップ
	- 複数デバイス間での設定同期
	
	## 3. 非機能要件
	
	3.1 性能要件
	- アプリの起動時間: 3秒以内
	- アラーム設定の反映: リアルタイム（1秒以内）
	- サーバーレスポンス時間: 平均500ms以内
	- 同期処理: 5秒以内に完了
	
	3.2 信頼性要件
	- アプリのクラッシュ率: 0.1%未満
	- サーバーの稼働時間: 99.9%以上（月間ダウンタイム約43分以内）
	- データ損失の防止: 定期的なバックアップと冗長化
	
	3.3 セキュリティ要件
	- ユーザー認証: 安全なパスワードポリシーの実装
	- データ暗号化: 転送中および保存時のデータ暗号化
	- セキュアな通信: HTTPS/SSL の使用
	- アクセス制御: 適切な権限管理の実装
	
	3.4 拡張性要件
	- ユーザー数の増加に対応できるスケーラブルな設計
	- 将来的な機能追加を考慮したモジュラー設計
	
	3.5 互換性要件
	- Android バージョン: 最新の3バージョンをサポート
	- Webブラウザ: 主要ブラウザ（Chrome, Firefox, Safari, Edge）の最新版をサポート
	- レスポンシブデザイン: さまざまな画面サイズに対応
	
	3.6 ユーザビリティ要件
	- 直感的なUI/UX設計
	- アクセシビリティガイドラインへの準拠
	- ヘルプ・ガイダンス機能の提供
	
	## 4. システムアーキテクチャ
	
	4.1 全体アーキテクチャ
	
	システムは以下の3つの主要コンポーネントで構成されます：
	1. Androidアプリケーション
	2. Webアプリケーション（TypeScript + React）
	3. バックエンドサーバー（AWS + Python）
	
	クライアント-サーバーモデルを採用し、クライアント（AndroidアプリとWebアプリ）がユーザーインターフェースと基本的な処理を担当し、サーバーがデータの永続化、同期、外部APIとの連携を担当します。
	
	4.2 クライアントサイドアーキテクチャ
	
	Androidアプリ:
	- アーキテクチャパターン: MVVM（Model-View-ViewModel）
	- 主要コンポーネント:
	- Activities: メイン画面、設定画面、アラーム画面
	- Fragments: カレンダー表示、パターン編集
	- Services: バックグラウンドでのアラーム管理
	- ViewModels: UIロジックとデータ管理
	- Repositories: データ操作の抽象化
	- ローカルデータストレージ: Room データベース
	- 非同期処理: Coroutines
	- 依存性注入: Hilt
	
	Webアプリ（TypeScript + React）:
	- アーキテクチャ: コンポーネントベースアーキテクチャ
	- 状態管理: Redux
	- 主要コンポーネント:
	- カレンダー表示コンポーネント
	- パターン編集コンポーネント
	- 設定管理コンポーネント
	- ルーティング: React Router
	- API通信: Axios
	
	4.3 サーバーサイドアーキテクチャ
	
	AWS インフラストラクチャ:
	- コンピューティング: AWS Lambda（サーバーレス）
	- API管理: Amazon API Gateway
	- データベース: Amazon DynamoDB
	- 認証: Amazon Cognito
	- ストレージ: Amazon S3（ユーザーアップロードファイル用）
	
	Pythonバックエンド:
	- フレームワーク: FastAPI
	- 主要モジュール:
	- ユーザー管理
	- アラームパターン管理
	- 同期処理
	- 外部API連携（天気情報）
	
	4.4 データフロー
	
	1. クライアントからのリクエスト → API Gateway → Lambda関数
	2. Lambda関数でのビジネスロジック処理
	3. 必要に応じてDynamoDBとのデータ操作
	4. レスポンスをクライアントに返送
	5. クライアントでのデータ更新と表示
	
	4.5 外部サービス統合
	
	天気情報API連携:
	- 使用API: OpenWeatherMap API（例）
	- 連携方法:
	1. ユーザーの位置情報をクライアントから取得
	2. バックエンドでAPIリクエストを実行
	3. 取得したデータをクライアントに送信
	4. クライアントで天気情報を表示
	
	4.6 セキュリティアーキテクチャ
	
	- 認証: Amazon Cognitoを使用
	- ユーザー登録、ログイン処理の管理
	- JWTトークンによる認証
	- 通信暗号化: HTTPS/TLS
	- データ暗号化:
	- 転送時: TLS
	- 保存時: AWSのサーバーサイド暗号化
	- アクセス制御:
	- IAMロールによるAWSリソースへのアクセス管理
	- アプリケーションレベルでの適切な権限チェック
	
	## 5. データモデル
	
	5.1 エンティティの定義
	
	1. ユーザー
	- id: 一意の識別子（UUID）
	- username: ユーザー名
	- email: メールアドレス
	- password_hash: ハッシュ化されたパスワード
	- created_at: アカウント作成日時
	- last_login: 最終ログイン日時
	
	2. アラームパターン
	- id: 一意の識別子（UUID）
	- user_id: ユーザーID（外部キー）
	- name: パターン名
	- description: パターンの説明
	- created_at: 作成日時
	- updated_at: 更新日時
	
	3. アラーム設定
	- id: 一意の識別子（UUID）
	- pattern_id: アラームパターンID（外部キー）
	- time: アラーム時刻
	- days_of_week: 曜日（ビットフラグ）
	- sound: アラーム音声ファイル名
	- volume: 音量
	- gradual_increase: 段階的音量増加の有無
	- snooze_duration: スヌーズ時間（分）
	- enabled: 有効/無効フラグ
	
	4. カレンダーイベント
	- id: 一意の識別子（UUID）
	- user_id: ユーザーID（外部キー）
	- pattern_id: アラームパターンID（外部キー）
	- date: 日付
	- note: メモ
	
	5.2 データベーススキーマ
	
	DynamoDBを使用するため、NoSQLデータモデルを採用します。以下は各テーブルの主要な属性です：
	
	1. Users テーブル
	- パーティションキー: id
	- 属性: username, email, password_hash, created_at, last_login
	
	2. AlarmPatterns テーブル
	- パーティションキー: user_id
	- ソートキー: id
	- 属性: name, description, created_at, updated_at
	
	3. AlarmSettings テーブル
	- パーティションキー: pattern_id
	- ソートキー: id
	- 属性: time, days_of_week, sound, volume, gradual_increase, snooze_duration, enabled
	
	4. CalendarEvents テーブル
	- パーティションキー: user_id
	- ソートキー: date
	- 属性: pattern_id, note
	
	5.3 オブジェクトモデル
	
	クライアントサイド（AndroidとWeb）では、以下のようなオブジェクトモデルを使用します：
	
	```kotlin
	// Androidの場合（Kotlin）
	data class User(
	val id: String,
	val username: String,
	val email: String
	)
	
	data class AlarmPattern(
	val id: String,
	val name: String,
	val description: String
	)
	
	data class AlarmSetting(
	val id: String,
	val time: LocalTime,
	val daysOfWeek: Set<DayOfWeek>,
	val sound: String,
	val volume: Int,
	val gradualIncrease: Boolean,
	val snoozeDuration: Int,
	val enabled: Boolean
	)
	
	data class CalendarEvent(
	val id: String,
	val date: LocalDate,
	val patternId: String,
	val note: String?
	)
	
	5.4 データの関連性
	
	ユーザーは複数のアラームパターンを持つ（1対多）
	アラームパターンは複数のアラーム設定を持つ（1対多）
	ユーザーは複数のカレンダーイベントを持つ（1対多）
	カレンダーイベントは1つのアラームパターンに関連付けられる（多対1）
	
	5.5 データフロー
	
	ユーザーがアプリにログインする
	クライアントがユーザーの全アラームパターンを取得
	ユーザーがカレンダーを表示すると、該当期間のカレンダーイベントを取得
	アラームパターンが選択されると、関連するアラーム設定を取得
	ユーザーが設定を変更すると、クライアントからサーバーに更新を送信
	サーバーがデータを永続化し、成功レスポンスを返す
	クライアントが本体のアラーム機能にデータを反映
	
	6. ユーザーインターフェース設計
	
	6.1 主要画面のワイヤーフレーム
	
	1. カレンダー画面（詳細表示）
	#ERROR!
	< 戻る    2024年7月    >日 月 火 水 木 金 土1  2  3  4  5  67  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31選択日: 7月15日 (月)パターン: 平日アラーム: 07:00, 12:00[編集] [コピー] [削除][一括編集モードへ]+--------------------------------+
	Copy
	2. カレンダー画面（一括編集モード）
	#ERROR!
	< 戻る    2024年7月    >日 月 火 水 木 金 土1  2  3  4  5  67  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31パターン:[赤] 平日 7:00, 12:00[青] 週末 9:00, 14:00[緑] 休暇 OFF[パターン編集] [保存]+--------------------------------+
	Copy
	3. パターン設定画面
	#ERROR!
	< 戻る   パターン設定   保存パターン1:色: [赤] 名前: [平日]時間1: [07:00] 音: [デフォルト]時間2: [12:00] 音: [ベル][+ 時間を追加]パターン2:色: [青] 名前: [週末]時間1: [09:00] 音: [さわやか]時間2: [14:00] 音: [鳥の鳴き声][+ 時間を追加]パターン3:色: [緑] 名前: [休暇]時間: [OFF]    音: [なし][+ 新しいパターンを追加]+--------------------------------+
	Copy
	6.2 画面フロー
	
	- カレンダー画面（詳細表示）から「一括編集モードへ」ボタンでカレンダー画面（一括編集モード）に遷移
	- カレンダー画面（一括編集モード）の「パターン編集」ボタンでパターン設定画面に遷移
	- 各画面に戻るボタンを配置
	
	6.3 デザインガイドライン
	
	- 色彩：
	- プライマリカラー: #3F51B5（深い青）
	- セカンダリカラー: #FF4081（ピンク）
	- 背景色: #FFFFFF（白）
	- テキスト色: #212121（濃いグレー）
	
	- フォント：
	- 見出し: Roboto Bold, 24sp
	- 本文: Roboto Regular, 16sp
	- 小さいテキスト: Roboto Light, 14sp
	
	- アイコン：
	- Material Designのアイコンセットを使用
	
	7. API設計
	
	ベースURL: https://api.alarmapp.com/v1
	認証: JWT (JSON Web Token)を使用
	
	7.1 ユーザー管理API
	
	1. ユーザー登録
	- エンドポイント: POST /users
	- リクエスト本文:
	```json
	{
	username: "string",
	email: "string",
	password: "string"
	}
	```
	- レスポンス:
	```json
	{
	user_id: "string",
	username: "string",
	email: "string",
	token: "string"
	}
	```
	
	2. ログイン
	- エンドポイント: POST /users/login
	- リクエスト本文:
	```json
	{
	email: "string",
	password: "string"
	}
	```
	- レスポンス:
	```json
	{
	user_id: "string",
	username: "string",
	token: "string"
	}
	```
	
	3. ユーザー情報取得
	- エンドポイント: GET /users/{user_id}
	- ヘッダー: Authorization: Bearer {token}
	- レスポンス:
	```json
	{
	user_id: "string",
	username: "string",
	email: "string"
	}
	```
	
	7.2 アラームパターンAPI
	
	1. パターン一覧取得
	- エンドポイント: GET /users/{user_id}/patterns
	- ヘッダー: Authorization: Bearer {token}
	- レスポンス:
	```json
	{
	patterns: [
	{
	pattern_id: "string",
	name: "string",
	color: "string",
	times: [
	{
	time: "HH:MM",
	sound: "string"
	}
	]
	}
	]
	}
	```
	
	2. パターン作成
	- エンドポイント: POST /users/{user_id}/patterns
	- ヘッダー: Authorization: Bearer {token}
	- リクエスト本文:
	```json
	{
	name: "string",
	color: "string",
	times: [
	{
	time: "HH:MM",
	sound: "string"
	}
	]
	}
	```
	- レスポンス: 作成されたパターンの詳細
	
	3. パターン更新
	- エンドポイント: PUT /users/{user_id}/patterns/{pattern_id}
	- ヘッダー: Authorization: Bearer {token}
	- リクエスト本文: パターン作成と同じ
	- レスポンス: 更新されたパターンの詳細
	
	4. パターン削除
	- エンドポイント: DELETE /users/{user_id}/patterns/{pattern_id}
	- ヘッダー: Authorization: Bearer {token}
	- レスポンス: 成功メッセージ
	
	7.3 カレンダーイベントAPI
	
	1. 月別イベント取得
	- エンドポイント: GET /users/{user_id}/events?year={YYYY}&month={MM}
	- ヘッダー: Authorization: Bearer {token}
	- レスポンス:
	```json
	{
	events: [
	{
	date: "YYYY-MM-DD",
	pattern_id: "string"
	}
	]
	}
	```
	
	2. イベント一括更新
	- エンドポイント: PUT /users/{user_id}/events
	- ヘッダー: Authorization: Bearer {token}
	- リクエスト本文:
	```json
	{
	events: [
	{
	date: "YYYY-MM-DD",
	pattern_id: "string"
	}
	]
	}
	```
	- レスポンス: 成功メッセージ
	
	7.4 同期API
	
	1. データ同期
	- エンドポイント: POST /users/{user_id}/sync
	- ヘッダー: Authorization: Bearer {token}
	- リクエスト本文: 最後の同期以降の変更データ
	- レスポンス: サーバー側の変更データ
	
	7.5 天気情報API
	
	1. 現在地の天気情報取得
	- エンドポイント: GET /weather?lat={latitude}&lon={longitude}
	- ヘッダー: Authorization: Bearer {token}
	- レスポンス:
	```json
	{
	temperature: number,
	condition: "string",
	icon: "string"
	}
	```
	
	7.6 エラーハンドリング
	
	すべてのAPIエンドポイントは、エラーが発生した場合に以下の形式でレスポンスを返します：
	
	```json
	{
	error: {
	code: "string",
	message: "string"
	}
	}
	一般的なHTTPステータスコードを使用します（例：400 Bad Request、401 Unauthorized、404 Not Found、500 Internal Server Error）。
	
	簡略化されたテスト計画（個人開発向け）
	
	8.1 テストの種類
	
	単体テスト
	統合テスト
	手動システムテスト
	
	8.2 テスト環境
	
	開発環境：個人の開発マシン
	テスト用デバイス：実機またはエミュレータ
	
	8.3 テスト計画の詳細
	
	単体テスト
	
	対象：重要な関数やメソッド
	ツール：JUnit (Android), Jest (Web), pytest (Python/サーバーサイド)
	実施：主要な機能実装時に随時
	
	
	統合テスト
	
	対象：画面遷移、APIとのデータのやり取り
	手動で実施、必要に応じて自動化
	
	
	手動システムテスト
	
	主要機能のチェックリストを作成し、定期的に確認
	例：
	
	アラームの設定と発火
	パターンの作成、編集、削除
	カレンダーでの一括編集
	オフライン動作の確認
	
	
	
	
	
	8.4 簡易的なセキュリティチェック
	
	HTTPS通信の確認
	データの適切な暗号化
	基本的な入力バリデーション
	
	8.5 テストスケジュール
	
	開発中：単体テストを随時実施
	機能実装後：統合テストと手動システムテスト
	リリース前：全機能の最終確認
	
	8.6 バグ管理
	
	簡易的なTODOリストやメモツールを使用
	発見したバグや改善点を記録し、優先順位をつけて対応
	
	
	開発スケジュール
	
	第1月（1-4週）：基本設計と環境構築
	1週目：
	
	プロジェクトの詳細計画
	開発環境のセットアップ（Android Studio, React開発環境, AWS）
	データベース設計の詳細化
	
	2-3週目：
	
	基本的なユーザーインターフェースの実装（Android & Web）
	コアロジックの実装開始（アラーム管理、パターン設定）
	
	4週目：
	
	バックエンド基本構造の実装（AWS Lambda, DynamoDB）
	認証システムの実装
	
	第2月（5-8週）：主要機能の実装
	5-6週目：
	
	アラーム機能の完全実装
	カレンダー機能の実装
	パターン設定機能の実装
	
	7-8週目：
	
	データ同期機能の実装
	天気情報API連携の実装
	ユーザー設定機能の実装
	
	第3月（9-12週）：仕上げと最終テスト
	9-10週目：
	
	UIの洗練
	パフォーマンス最適化
	バグ修正と安定性向上
	
	11週目：
	
	総合テスト
	ドキュメンテーション作成
	
	12週目：
	
	最終調整とバグ修正
	アプリのパッケージング
	個人利用開始の準備
	
	各週の終わりに、進捗の確認と次週の計画調整を行います。
